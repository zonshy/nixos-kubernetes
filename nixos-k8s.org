1. cfssl kit
#+BEGIN_SRC shell
  nix-env -iA nixos.cfssl
#+END_SRC


2. nixos configurations
#+BEGIN_SRC config 
environment.systemPackages = with pkgs; [
    emacs tmux curl git ipvsadm certbot easyrsa kubernetes
  ];

programs.bash.enableCompletion = true;
  virtualisation.docker.enable = true;
  virtualisation.docker.extraOptions = "--graph=/data/docker";

  networking.extraHosts = "
  10.170.0.4    pike
  ";

boot.kernelModules = ["ip_vs" "ip_vs_rr" "ip_vs_wrr" "ip_vs_wrr" "nf_conntrack_ipv4"];
  services.etcd = {
    name = "default";
    initialAdvertisePeerUrls = ["http://127.0.0.1:2380"];
    initialClusterToken = "etcd-cluster";
    listenClientUrls = ["http://127.0.0.1:2379"];
    listenPeerUrls = ["http://127.0.0.1:2380"];
    peerCertFile = "/etc/kubernetes/pki/etcd/etcd.pem";
    peerKeyFile = "/etc/kubernetes/pki/etcd/etcd-key.pem";
    peerTrustedCaFile = "/etc/kubernetes/pki/etcd/etcd-root-ca.pem";
    trustedCaFile = "/etc/kubernetes/pki/etcd/etcd-root-ca.pem";
    keyFile = "/etc/kubernetes/pki/etcd/etcd-key.pem";
    certFile = "/etc/kubernetes/pki/etcd/etcd.pem";
  };

  services.kubernetes = {
    roles = ["master" "node"];
    #addons.dashboard.enable = true;
    apiserver.port = 8080;
    apiserver.securePort = 8443;
    proxy.extraOpts = "--proxy-mode=ipvs";
    caFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    apiserver.extraOpts = "--anonymous-auth=false";
    apiserver.clientCaFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    apiserver.tlsCertFile = "/etc/kubernetes/pki/k8s/kubernetes.pem";
    apiserver.tlsKeyFile = "/etc/kubernetes/pki/k8s/kubernetes-key.pem";
    apiserver.serviceAccountKeyFile = "/etc/kubernetes/pki/k8s/k8s-root-ca-key.pem";
    apiserver.tokenAuthFile = "/etc/kubernetes/pki/k8s/token.csv";
    apiserver.kubeletClientCaFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    apiserver.kubeletClientCertFile = "/etc/kubernetes/pki/k8s/admin.pem";
    apiserver.kubeletClientKeyFile = "/etc/kubernetes/pki/k8s/admin-key.pem";
    apiserver.kubeletHttps = true;
    apiserver.authorizationMode = ["AlwaysAllow"];
    apiserver.serviceClusterIpRange = "198.14.0.0/24";
    clusterCidr = "192.168.0.0/16";
    #apiserver.disableAdmissionPlugins = ["NodeRestriction"];
    #apiserver.enableAdmissionPlugins = [ "NamespaceLifecycle" "LimitRanger" "ServiceAccount" "ResourceQuota" "DefaultStorageClass" "DefaultTolerationSeconds" ];

    kubeconfig.server = "https://127.0.0.1:8443";

    controllerManager.rootCaFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    controllerManager.serviceAccountKeyFile = "/etc/kubernetes/pki/k8s/k8s-root-ca-key.pem";
    controllerManager.kubeconfig.caFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    controllerManager.kubeconfig.certFile = "/etc/kubernetes/pki/k8s/kube-controller-manager.pem";
    controllerManager.kubeconfig.keyFile = "/etc/kubernetes/pki/k8s/kube-controller-manager-key.pem";
    controllerManager.kubeconfig.server = "https://127.0.0.1:8443";

    etcd.caFile = "/etc/kubernetes/pki/etcd/etcd-root-ca.pem";
    etcd.certFile = "/etc/kubernetes/pki/etcd/etcd.pem";
    etcd.keyFile = "/etc/kubernetes/pki/etcd/etcd-key.pem";
    etcd.servers = ["http://127.0.0.1:2379"];

    proxy.kubeconfig.caFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    proxy.kubeconfig.certFile = "/etc/kubernetes/pki/k8s/kube-proxy.pem";
    proxy.kubeconfig.keyFile = "/etc/kubernetes/pki/k8s/kube-proxy-key.pem";
    proxy.kubeconfig.server = "https://127.0.0.1:8443";

    scheduler.kubeconfig.caFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    scheduler.kubeconfig.certFile = "/etc/kubernetes/pki/k8s/kube-scheduler.pem";
    scheduler.kubeconfig.keyFile = "/etc/kubernetes/pki/k8s/kube-scheduler-key.pem";
    scheduler.kubeconfig.server = "https://127.0.0.1:8443";

    kubelet.hostname = "pike";
    kubelet.enable = true;
    kubelet.nodeIp = "10.170.0.4";
    kubelet.applyManifests = true;
    kubelet.tlsCertFile = "/etc/kubernetes/pki/k8s/kubelet.pem";
    kubelet.tlsKeyFile = "/etc/kubernetes/pki/k8s/kubelet-key.pem";
    kubelet.kubeconfig.caFile = "/etc/kubernetes/pki/k8s/k8s-root-ca.pem";
    kubelet.kubeconfig.certFile = "/etc/kubernetes/pki/k8s/kubelet.pem";
    kubelet.kubeconfig.keyFile = "/etc/kubernetes/pki/k8s/kubelet-key.pem";
    kubelet.kubeconfig.server = "https://127.0.0.1:8443";

    };

#+END_SRC

3. generate certs for kubenetes apiserver/kubelet/proxy/..
#+BEGIN_SRC shell
# etcd -> cd etcd
cat > etcd-csr.json <<EOF
{
  "key":{
    "algo":"rsa",
    "size":4096
  },
  "names":[
    {
      "O":"etcd",
      "OU":"etcd Security",
      "L":"Beijing",
      "ST":"Beijing",
      "C":"CN"
    }
  ],
  "CN":"etcd",
  "hosts":[
    "127.0.0.1",
    "localhost",
    "10.170.0.4"
  ]
}
EOF

cat > etcd-gencert.json <<EOF
{
  "signing":{
    "default":{
      "usages":[
        "signing",
        "key encipherment",
        "server auth",
        "client auth"
      ],
      "expiry":"87600h"
    }
  }
}
EOF

cat > etcd-root-ca-csr.json <<EOF
{
  "key":{
    "algo":"rsa",
    "size":4096
  },
  "names":[
    {
      "O":"etcd",
      "OU":"etcd Security",
      "L":"Beijing",
      "ST":"Beijing",
      "C":"CN"
    }
  ],
  "CN":"etcd-root-ca"
}
EOF
#+END_SRC

#+BEGIN_SRC shell
cfssl gencert --initca=true etcd-root-ca-csr.json | cfssljson --bare etcd-root-ca
cfssl gencert --ca etcd-root-ca.pem --ca-key etcd-root-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd
#+END_SRC

# k8s -> cd k8s
#+BEGIN_SRC shell
cat > admin-csr.json <<ABC
{
  "CN":"admin",
  "hosts":[],
  "key":{
    "algo":"rsa",
    "size":2048
  },
  "names":[
    {
      "C":"CN",
      "ST":"BeiJing",
      "L":"BeiJing",
      "O":"system:masters",
      "OU":"System"
    }
  ]
}
ABC

cat > k8s-gencert.json <<ABC
{
  "signing":{
    "default":{
      "expiry":"87600h"
    },
    "profiles":{
      "kubernetes":{
        "usages":[
          "signing",
          "key encipherment",
          "server auth",
          "client auth"
        ],
        "expiry":"87600h"
      }
    }
  }
}
ABC

cat > k8s-root-ca-csr.json <<ABC
{
  "CN":"kubernetes",
  "key":{
    "algo":"rsa",
    "size":4096
  },
"names":[
    {
      "C":"CN",
      "ST":"BeiJing",
      "L":"BeiJing",
      "O":"k8s",
      "OU":"System"
    }
  ]
}
ABC

cat > kube-controller-manager-csr.json <<ABC
{
  "CN": "system:kube-controller-manager",
  "hosts": [],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "CN",
      "ST": "BeiJing",
      "L": "BeiJing",
      "O": "k8s",
      "OU": "System"
    }
  ]
}
ABC

cat > kubelet-csr.json <<ABC
{
  "CN": "system:node:pike",
  "hosts": [
    "pike"
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "CN",
      "ST": "BeiJing",
      "L": "BeiJing",
      "O": "system:nodes",
      "OU": "System"
    }
  ]
}
ABC

cat > kube-proxy-csr.json <<ABC
{
  "CN":"system:kube-proxy",
  "hosts":[],
  "key":{
    "algo":"rsa",
    "size":2048
  },
"names":[
    {
      "C":"CN",
      "ST":"BeiJing",
      "L":"BeiJing",
      "O":"k8s",
      "OU":"System"
    }
  ]
}
ABC

cat > kubernetes-csr.json <<ABC
{
  "CN":"kubernetes",
  "hosts":[
    "127.0.0.1",
    "10.254.0.1",
    "10.170.0.4",
    "localhost",
    "kubernetes",
    "kubernetes.default",
    "kubernetes.default.svc",
    "kubernetes.default.svc.cluster",
    "kubernetes.default.svc.cluster.local"
  ],
  "key":{
    "algo":"rsa",
    "size":2048
  },
  "names":[
    {
      "C":"CN",
      "ST":"BeiJing",
      "L":"BeiJing",
      "O":"k8s",
      "OU":"System"
    }
  ]
}
ABC


cat > kube-scheduler-csr.json <<ABC
{
  "CN": "system:kube-scheduler",
  "hosts": [],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names":[
    {
      "C":"CN",
      "ST":"BeiJing",
      "L":"BeiJing",
      "O":"k8s",
      "OU":"System"
    }
  ]
}
ABC

#+BEGIN_SRC shell
cfssl gencert --initca=true k8s-root-ca-csr.json | cfssljson --bare k8s-root-ca

for targetName in kubernetes admin kube-proxy kube-scheduler kubelet kube-controller-manager; do
    cfssl gencert --ca k8s-root-ca.pem --ca-key k8s-root-ca-key.pem --config k8s-gencert.json --profile kubernetes $targetName-csr.json | cfssljson --bare $targetName
done

#+END_SRC

#+BEGIN_SRC shell
# Copy certs *.pem to /etc/kubernetes/pki/
cd etcd
cp *.pem /etc/kubernetes/pki/etcd -v


cd k8s
cp *.pem /etc/kubernetes/pki/k8s -v

# Grant user etcd can read certs pem
chown -R etcd /etc/kubernetes/pki/etcd

# Grant user kubernetes can read certs pem
chown -R kubernetes /etc/kubernetes/pki/k8s

# for kubernetes apiserver need etcd-key.pem read access
setfacl -m u:kubernetes:r /etc/kubernetes/pki/etcd/etcd-key.pem

#+END_SRC


4. switch configuration and active new 
#+BEGIN_SRC 
nixos-rebuild switch
#+END_SRC


5. k8s-errors

a. 
#+BEGIN_QUOTE
  Warning  FailedScheduling  6m59s  default-scheduler  0/1 nodes are available: 1 node(s) had taints that the pod didn't tolerate.
  Normal   Scheduled         2m57s  default-scheduler  Successfully assigned default/nginx-deployment-7db75b8b78-s6knt to ftp
  Normal   Pulling           2m56s  kubelet, ftp       pulling image "nginx"
  Normal   Pulled            2m52s  kubelet, ftp       Successfully pulled image "nginx"
  Normal   Created           2m52s  kubelet, ftp       Created container
  Normal   Started           2m51s  kubelet, ftp       Started container

-> 0/1 nodes are available: 1 node(s) had taints that the pod didn't tolerate.
#+END_QUOTE

According the Creating a single master cluster with kubeadm, execute the command 
#+BEGIN_SRC shell
kubectl taint nodes --all node-role.kubernetes.io/master-
#+END_SRC


b. ROLES is be seted '<none>'
#+BEGIN_SRC shell
kubectl label node pike node-role.kubernetes.io/master=
#+END_SRC


c. kube-dns crashes because it can't access Kubernetes API
#+BEGIN_VERSE
services.kubernetes.clusterCidr = "192.168.0.0/16";
#+END_VERSE

d. Jan 09 08:54:10 phy15 kube-apiserver[12792]: E0109 08:54:10.512950   12792 authentication.go:62] Unable to authenticate the request due to an error: [invalid bearer token, [invalid bearer token, square/go-jose: error in cryptographic primitive]]
#+BEGIN_SRC 
kubectl --namespace=kube-system delete secrets default-token-czmz6
#+END_SRC
and it will be show
#+BEGIN_VERSE
[root@phy15:~]# kubectl --namespace=kube-system get pods
NAME                        READY     STATUS    RESTARTS   AGE
kube-dns-7689ffc6b8-h72mg   3/3       Running   0          1m
#+END_VERSE

6. Generate .kube/config
#+BEGIN_SRC shell
kubectl config set-cluster kubernetes --server=https://127.0.0.1:8443 --certificate-authority=/etc/kubernetes/pki/k8s/k8s-root-ca.pem --embed-certs=true  --kubeconfig=.kube/config

kubectl config set-credentials kubernetes-admin --token=3dc1c6b2ee5866c82275ad65785f90b2 --client-certificate=/etc/kubernetes/pki/k8s/admin.pem --client-key=/etc/kubernetes/pki/k8s/admin-key.pem --embed-certs=true --kubeconfig=.kube/config

kubectl config set-context kubernetes-admin@kubernetes --cluster=kubernetes --user=kubernetes-admin --kubeconfig=.kube/config

kubectl config use-context default --kubeconfig=.kube/config
#+END_SRC
